#---------------------------------------------------------------------------------------------------
# Register definitions for block: {{ blk.name }}
#
{%- if blk.info %}
# {{ blk.info | trim | replace('\n', '\n# ') }}
#
{%- endif %}
# NOTE: This file was autogenerated by regio.
#---------------------------------------------------------------------------------------------------
__all__ = (
    '{{ blk.name_lower }}_block',
)

from regio.regmap.spec import *

#---------------------------------------------------------------------------------------------------
{%- set data_width = 32 %}{#- TODO: Shouldn't be hardcoded. Get from YAML? #}
class {{ blk.name_lower }}_block(Structure):
    {%- if blk.info %}
    '''
    {{ blk.info | trim | replace('\n', '\n    ') }}
    '''
    {%- endif %}

{%- set non_none_regs = 0 -%} {#- Tracking for empty blocks. -#}
{%- for reg in blk.regs: %}
    {%- if reg.access == 'none': -%}
        {%- if loop.last and non_none_regs == 0 and not blk.info: %}
    ...
        {%- endif -%}
        {%- continue -%}
    {%- else -%}
        {%- set non_none_regs = non_none_regs + 1 -%} {#- Tracking for empty blocks. -#}
    {%- endif -%}

    {%- set reg_size = (reg.width + data_width - 1) // data_width %}
    {%- set reg_width_rem = reg.width % data_width %}
    {%- if reg.count and reg.count > 1: %}
    class {{ reg.name_lower }}(Array, dimensions=({{ reg.count }},), offset={{ reg.offset // 4 }}): # 0x{{ '{:08X}'.format(reg.offset) }}
        class _r(Register, access='{{ reg.access | upper }}', offset=0, size={{ reg_size }}):{%- if not reg.fields and not reg.desc: %} ... {%- endif %}
            {%- if reg.desc %}
            '''
            {{ reg.desc | trim | replace('\n', '\n            ') }}
            '''
            {%- endif %}

        {%- if reg.fields: %}
            {%- set non_none_fields = 0 %}
            {%- for field in reg.fields: %}
                {%- if field.access == 'none': %}
                    {%- continue %}
                {%- else %}
                    {%- set non_none_fields = non_none_fields + 1 -%}
                {%- endif %}
            class {{ field.name_lower }}(Field, access='{{ field.access | upper }}', offset={{ field.offset }}, width={{ field.width }}): {%- if not field.desc %} ... {%- endif -%}
                {%- if field.desc %}
                '''
                {{ field.desc | trim | replace('\n', '\n                ') }}
                '''
                {%- endif %}
            {%- endfor %}
        {%- endif %}
        {%- if (not reg.fields or non_none_fields == 0) and reg_width_rem != 0: %}
            class _f(Field, access='{{ reg.access | upper }}', offset=0, width={{ reg.width }}): ...
        {%- endif %}
    {%- else: %}
    class {{ reg.name_lower }}(Register, access='{{ reg.access | upper }}', offset={{ reg.offset // 4 }}, size={{ reg_size }}): {%- if not reg.fields and not reg.desc: %} ... {%- endif %} # 0x{{ '{:08X}'.format(reg.offset) }}
        {%- if reg.desc %}
        '''
        {{ reg.desc | trim | replace('\n', '\n        ') }}
        '''
        {%- endif %}

        {%- if reg.fields: %}
            {%- set non_none_fields = 0 %}
            {%- for field in reg.fields: %}
                {%- if field.access == 'none': %}
                    {%- continue %}
                {%- else %}
                    {%- set non_none_fields = non_none_fields + 1 -%}
                {%- endif %}
        class {{ field.name_lower }}(Field, access='{{ field.access | upper }}', offset={{ field.offset }}, width={{ field.width }}): {%- if not field.desc %} ... {%- endif -%}
                {%- if field.desc %}
            '''
            {{ field.desc | trim | replace('\n', '\n            ') }}
            '''
                {%- endif %}
            {%- endfor %}
        {%- endif %}
        {%- if (not reg.fields or non_none_fields == 0) and reg_width_rem != 0: %}
        class _f(Field, access='{{ reg.access | upper }}', offset=0, width={{ reg.width }}): ...
        {%- endif %}
    {%- endif %}
{%- endfor %}

