#---------------------------------------------------------------------------------------------------
# Toplevel definitions for device: {{ top.name }}
#   PCI Vendor: 0x{{ '{:04x}'.format(top.pci_vendor) }}
#   PCI Device: 0x{{ '{:04x}'.format(top.pci_device) }}
#
{%- if top.info %}
# {{ top.info | trim | replace('\n', '\n# ') }}
#
{%- endif %}
# NOTE: This file was autogenerated by regio.
#---------------------------------------------------------------------------------------------------
__all__ = (
    'BAR_INFO',
    'NAME',
    'PCI_DEVICE',
    'PCI_VENDOR',
)

NAME = '{{ top.name_lower }}'
PCI_VENDOR = 0x{{ '{:04x}'.format(top.pci_vendor) }}
PCI_DEVICE = 0x{{ '{:04x}'.format(top.pci_device) }}

from regio.regmap.spec import AddressSpace
from regio.tools.pci import new_proxy
{% for blk in blks.keys() | sort: %}
from .blocks.{{ blk }}_block import *
{%- endfor %}
{% for dec in decs.keys() | sort: %}
from .decoders.{{ dec }}_decoder import *
{%- endfor %}

BAR_INFO = {}
{%- set data_width = 32 %}{#- TODO: Shouldn't be hardcoded. Get from YAML? #}
{%- set data_size = data_width // 8 %}
{% for barid, bar in top.bars.items(): -%}
{%- set class_name = top.name_lower + '_' + bar.name_lower %}
#---------------------------------------------------------------------------------------------------
# Toplevel struct for BAR {{ barid }} ({{ bar.name }})  {{ bar.desc }}
class {{ class_name }}(AddressSpace, data_width={{ data_width }}, pad_to={{ bar.size // data_size }}):
    {%- if top.info or bar.desc %}
    '''
        {%- if top.info %}
    {{ top.info | trim | replace('\n', '\n    ') }}
        {%- endif %}
        {%- if bar.desc %}
    {{ bar.desc | trim | replace('\n', '\n    ') }}
        {%- endif %}
    '''
    {%- endif %}

    {%- for region in bar.regions | sort(attribute='offset'): %}
        {%- if 'block' in region: %}
    class {{ region.name_lower }}({{ region.block.name_lower }}_block, offset={{ region.offset // data_size }}, pad_to={{ region.size // data_size }}): ... # 0x{{ '{:08X}'.format(region.offset) }}
        {%- elif 'decoder' in region: %}
    class {{ region.name_lower }}({{ region.decoder.name_lower }}_decoder, offset={{ region.offset // data_size }}, pad_to={{ region.size // data_size }}): ... # 0x{{ '{:08X}'.format(region.offset) }}
        {%- endif %}
    {%- endfor %}

def {{ class_name }}_new_proxy(pci_id, spec=None, io=None, *pargs, **kargs):
    return new_proxy(pci_id, {{ barid }}, {{ class_name }}, spec, io, *pargs, **kargs)

BAR_INFO.update({
    '{{ barid }}': {
        'size': {{ bar.size }},
        'pages': {{ bar.size_pages }},
        'spec_cls': {{ class_name }},
        'new_proxy': {{ class_name }}_new_proxy,
    }
})

__all__ += (
    '{{ class_name }}',
    '{{ class_name }}_new_proxy',
)
{% endfor %}

