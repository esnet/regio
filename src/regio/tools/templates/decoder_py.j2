#---------------------------------------------------------------------------------------------------
# Interface definitions for decoder: {{ dec.name }}
#
{%- if dec.info %}
# {{ dec.info | trim | replace('\n', '\n# ') }}
#
{%- endif %}
# NOTE: This file was autogenerated by regio.
#---------------------------------------------------------------------------------------------------
__all__ = (
    '{{ dec.name_lower }}_decoder',
)

from regio.regmap.spec import *
{% for blk in blks.keys() | sort: %}
from ..blocks.{{ blk }}_block import *
{%- endfor %}
{% for dec in decs.keys() | sort: %}
from .{{ dec }}_decoder import *
{%- endfor %}

#---------------------------------------------------------------------------------------------------
{%- set data_width = 32 %}{#- TODO: Shouldn't be hardcoded. Get from YAML? #}
{%- set data_size = data_width // 8 %}
class {{ dec.name_lower }}_decoder(Structure):
    {%- if dec.info %}
    '''
    {{ dec.info | trim | replace('\n', '\n    ') }}
    '''
    {%- endif %}

    {%- for region in dec.regions | sort(attribute='offset'): %}
        {%- if 'block' in region: %}
    class {{ region.name_lower }}({{ region.block.name_lower }}_block, offset={{ region.offset // data_size }}, pad_to={{ region.size // data_size }}): ... # 0x{{ '{:08X}'.format(region.offset) }}
        {%- elif 'decoder' in region: %}
    class {{ region.name_lower }}({{ region.decoder.name_lower }}_decoder, offset={{ region.offset // data_size }}, pad_to={{ region.size // data_size }}): ... # 0x{{ '{:08X}'.format(region.offset) }}
        {%- endif %}
    {%- endfor %}

