/*
 *  Toplevel definitions for device: {{ top.name }}
 *    PCI Vendor: {{ "{:02X}".format(top.pci_vendor) }}
 *    PCI Device: {{ "{:02X}".format(top.pci_device) }}
 *
 *  {{ top.info | replace('\n', '\n *  ') }}
 *
 *  NOTE: This file was autogenerated by regio
 */

#if !defined(INCLUDE_{{ top.name_upper }}_TOP_H)
#define INCLUDE_{{ top.name_upper }}_TOP_H 1

#include <stdint.h>
#include <stdbool.h>

#define {{ top.name_upper }}_PCI_VENDOR {{ "0x{:02X}".format(top.pci_vendor)}}
#define {{ top.name_upper }}_PCI_DEVICE {{ "0x{:02X}".format(top.pci_device)}}

{% for blk in blks.keys() | sort: %}
#include "{{ blk }}_block.h"
{%- endfor %}
{% for dec in decs.keys() | sort: %}
#include "{{ dec }}_decoder.h"
{%- endfor %}

{% for barid, bar in top.bars.items(): %}
/*
 * Toplevel struct for BAR {{ barid }} ({{ bar.name }})  {{ bar.desc }}
 */
#define {{ top.name_upper }}_BAR{{ barid }}_SIZE_BYTES {{ bar.size }}
#define {{ top.name_upper }}_BAR{{ barid }}_SIZE_PAGES {{ bar.size_pages }}

struct {{ top.name_lower }}_{{ bar.name_lower }} {
{%- for region in (bar.regions + bar.padding) | sort(attribute='offset'): %}
  {%- if 'block' in region: %}
  struct  {{ "{:40}".format("{}_block {};".format(region.block.name_lower, region.name_lower)) }}  // {{ "0x{:08X}".format(region.offset) }}
  {%- elif 'decoder' in region: %}
  struct  {{ "{:40}".format("{}_decoder {};".format(region.decoder.name_lower, region.name_lower)) }}  // {{ "0x{:08X}".format(region.offset) }}
  {%- else %}
  uint8_t anon_{{ "{:05X}[{}];".format(region['offset'], region['size']) }}
  {%- endif %}
{%- endfor %}
};

{% endfor %}

#endif // INCLUDE_{{ top.name_upper }}_TOP_H

