package {{ blk.name_lower }}_reg_pkg;

        // -------------------------------------------------------------
        // Block parameters
        // -------------------------------------------------------------
	
	localparam int BLOCK_SIZE = {{ blk.computed_size }};
	localparam int BLOCK_ADDR_WID = $clog2(BLOCK_SIZE);

        // -------------------------------------------------------------
        // Register address offsets
        // -------------------------------------------------------------
{% for reg in blk.regs: -%}
{%-   if reg.access != "none": %}
        localparam int OFFSET_{{ "{:18}".format(reg.name_upper) }} = {{ "'h{:08X}".format(reg.offset) }};
{%-   endif %}
{%- endfor %}

        // -------------------------------------------------------------
        // Register/field definitions
        // -------------------------------------------------------------
{%- for reg in blk.regs: %}
{%-   if reg.access != "none": %}
{%-     for field in reg.fields: %}

        // field: {{ reg.name_lower }}.{{ field.name_lower }}
        // description: {{ field.desc }}
{%-       if field.enum_hex: %}
        typedef enum bit [{{ field.width - 1 }}:0] {
{%-         for k, v in field.enum_hex.items() %}
                {{ "{:32}".format(reg.name_upper ~ '_' ~ field.name_upper ~ '_' ~ v | upper()) }} = {{ field.width }}'h{{ k }}{{ ',' if not loop.last }}
{%-         endfor %}
        } fld_{{ reg.name_lower }}_{{ field.name_lower }}_t;
{%-       else: %}
        typedef bit [{{ field.width - 1 }}:0] fld_{{ reg.name_lower }}_{{ field.name_lower }}_t;
{%-       endif %}
{%-     endfor %}

        // register: {{ reg.name_lower }}
{%-     if reg.desc: %}
        // description: {{ reg.desc }}
{%-     endif %}
{%-     if reg.fields: %}
        typedef struct packed {
{%-       for field in reg.fields:	%}
                fld_{{ reg.name_lower }}_{{ field.name_lower }}_t {{ field.name_lower }};
{%-       endfor %}
        } reg_{{ reg.name_lower }}_t;
{%-     else: %}
        typedef bit [{{ reg.width - 1 }}:0] reg_{{ reg.name_lower }}_t;
{%-     endif %}
{%-   endif %}
{%- endfor %}

        // -------------------------------------------------------------
        // Register initialization values
        // -------------------------------------------------------------
{% for reg in blk.regs: -%}
{%-   if reg.access != "none": %}
{%-     if 'init' in reg: %}
	localparam reg_{{ reg.name_lower }}_t INIT_{{ reg.name_upper }} = {{ reg.init }};
{%-     endif %}
{%-   endif %}
{%- endfor %}

endpackage : {{ blk.name_lower }}_reg_pkg
