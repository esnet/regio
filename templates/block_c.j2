/*
 *  Register definitions for block: {{ blk.name }}
 *
 *  {{ blk.info | replace('\n', '\n *  ') }}
 *
 *  NOTE: This file was autogenerated by regio
 */

#if !defined(INCLUDE_{{ blk.name_upper }}_BLOCK_H)
#define INCLUDE_{{ blk.name_upper }}_BLOCK_H 1

#include <stdint.h>
#include <stdbool.h>
{# blank #}
{%- for reg in blk.regs: %}
  {%- if reg.fields: %}
/*
 * {{ reg.name }}{{ ": {}".format(reg.desc) if reg.desc }}
 */

union {{ blk.name_lower }}_{{ reg.name_lower }} {
  struct {
    {%- for field in reg.fields: %}
      {{ "{:40}".format(ctypes[reg.width] ~ ' ' ~ field.name_lower) }} : {{ "{:2d}".format(field.width) }};
      {%- if field.access != "none": %}
	{%- if field.width > 1: %}
          {{- "   //   [{:2d}:{:2d}]".format(field.offset + field.width - 1, field.offset) }}
        {%- else: %}
          {{- "   //   [   {:2d}]".format(field.offset) }}
        {%- endif %}
      {%- endif %}
    {%- endfor %}
  };
  {{ ctypes[reg.width] }} _v;
};
{# blank #}
    {%- for field in reg.fields: %}
      {%- if field.access != "none": %}
#define
  {{- " {:50}".format(blk.name_upper ~ '_' ~ reg.name_upper ~ '_' ~ field.name_upper ~ '_MASK') }}
  {{- "  0x{:0{}X}".format(field.mask, reg.width // 4 ) }}
  {{- "  // {}".format(field.desc) if field.desc }}
      {%- endif %}
    {%- endfor %}
{# blank #}
    {%- for field in reg.fields: %}
      {%- if field.access != "none": %}
#define
  {{- " {:50}".format(blk.name_upper ~ '_' ~ reg.name_upper ~ '_' ~ field.name_upper ~ '_SHIFT') }}
  {{- "  {:>10}".format(field.offset) }}
  {{- "  // {}".format(field.desc) if field.desc }}
      {%- endif %}
    {%-   endfor %}
    {%- for field in reg.fields: %}
      {%- if field.enum_hex: %}
enum {{ blk.name_lower }}_{{ reg.name_lower }}_{{ field.name_lower }} {
	{%- for k, v in field.enum_hex.items(): %}
  {{ "{:40}".format(blk.name_upper ~'_' ~ reg.name_upper ~ '_' ~ field.name_upper ~ '_' ~ v | upper()) }} = 0x{{ k }},
        {%- endfor %}
};
      {%- endif %}
    {%- endfor %}
{# blank #}
  {%- endif %}
  {%- if reg.count and reg.count > 1: %}
#define
  {{- " {:50}".format(blk.name_upper ~ '_' ~ reg.name_upper ~ '_COUNT') }}
  {{- "  {:d}".format(reg.count) }}
  {%- endif %}
{# blank #}
{%- endfor %}

struct {{ blk.name_lower }}_block {
{%- for reg in blk.regs: %}
  {%- if reg.count and reg.count > 1: %}
    {%- if reg.fields: %}
  {{ "{:60}".format('union ' ~ blk.name_lower ~ '_' ~ reg.name_lower ~ ' ' ~ reg.name_lower ~ '[' ~ reg.count ~ '];') }} //
    {%- else: %}
  {{ "{:60}".format(ctypes[reg.width] ~ ' ' ~ reg.name_lower ~ '[' ~ reg.count ~ '];') }} //
    {%- endif %}
  {%- else: %}
    {%- if reg.fields: %}
  {{ "{:60}".format('union ' ~ blk.name_lower ~ '_' ~ reg.name_lower ~ ' ' ~ reg.name_lower ~ ';') }} //
    {%- else: %}
  {{ "{:60}".format(ctypes[reg.width] ~ ' ' ~ reg.name_lower ~ ';') }} //
    {%- endif %}
  {%- endif %}
  {%- if reg.access != "none": %}
  {{- " 0x{:08X}".format(reg.offset) }} {{ ": {}".format(reg.desc) if reg.desc }}
  {%- endif %}
{%- endfor %}
} __attribute((packed));

#endif // INCLUDE_{{ blk.name_upper }}_BLOCK_H

